# Use the manylinux_2_28 base image for ppc64le
FROM quay.io/pypa/manylinux_2_28_ppc64le as base

# Language variables
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
ENV LANGUAGE=C.UTF-8

ARG DEVTOOLSET_VERSION=13

# Create symbolic links for Python 3.12
RUN ln -sf /opt/python/cp312-cp312/bin/python3.12 /usr/bin/python3 && \
    ln -sf /opt/python/cp312-cp312/bin/python3.12 /usr/bin/python

# Install required system dependencies
RUN yum -y install epel-release && \
    yum -y update && \
    yum install -y \
      sudo \
      autoconf \
      automake \
      bison \
      bzip2 \
      curl \
      diffutils \
      file \
      git \
      make \
      patch \
      perl \
      unzip \
      util-linux \
      wget \
      which \
      xz \
      yasm \
      less \
      zstd \
      libgomp \
      gcc-toolset-${DEVTOOLSET_VERSION}-gcc \
      gcc-toolset-${DEVTOOLSET_VERSION}-gcc-c++ \
      gcc-toolset-${DEVTOOLSET_VERSION}-binutils \
      gcc-toolset-${DEVTOOLSET_VERSION}-gcc-gfortran \
      cmake \
      ninja-build \
      rust \
      cargo \
      llvm-devel \
      libzstd-devel \
      python3.12-devel \
      python3.12-setuptools \
      python3.12-pip \
      python3-virtualenv \
      python3.12-pyyaml \
      python3.12-numpy \
      python3.12-wheel \
      python3.12-cryptography \
      blas-devel \
      openblas-devel \
      lapack-devel \
      atlas-devel \
      libjpeg-devel \
      libxslt-devel \
      libxml2-devel \
      openssl-devel \
      valgrind
  

# Ensure the correct Python version is used
ENV PATH=/opt/python/cp312-cp312/bin:$PATH
# Add gcc-toolset to the path
ENV PATH=/opt/rh/gcc-toolset-${DEVTOOLSET_VERSION}/root/usr/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/rh/gcc-toolset-${DEVTOOLSET_VERSION}/root/usr/lib64:/opt/rh/gcc-toolset-${DEVTOOLSET_VERSION}/root/usr/lib:$LD_LIBRARY_PATH

# Configure git to avoid safe directory issues
RUN git config --global --add safe.directory "*"

# installed python doesn't have development parts. Rebuild it from scratch
RUN /bin/rm -rf /opt/_internal /opt/python /usr/local/*/*

# EPEL for cmake
FROM base as patchelf
# Install patchelf
ADD ./common/install_patchelf.sh install_patchelf.sh
RUN bash ./install_patchelf.sh && rm install_patchelf.sh
RUN cp $(which patchelf) /patchelf

FROM patchelf as python
# build python
COPY manywheel/build_scripts /build_scripts
ADD ./common/install_cpython.sh /build_scripts/install_cpython.sh
ENV SSL_CERT_FILE=
RUN bash build_scripts/build.sh && rm -r build_scripts
#RUN bash build_scripts/build.sh || (echo "Checksum verification failed!" && exit 1)

FROM base as final
COPY --from=python             /opt/python                           /opt/python
COPY --from=python             /opt/_internal                        /opt/_internal
COPY --from=python             /opt/python/cp39-cp39/bin/auditwheel  /usr/local/bin/auditwheel
COPY --from=patchelf           /usr/local/bin/patchelf               /usr/local/bin/patchelf

RUN alternatives --set python /usr/bin/python3.12
RUN alternatives --set python3 /usr/bin/python3.12

RUN pip-3.12 install typing_extensions

# Install required Python packages
#RUN pip install --upgrade pip
#RUN pip install typing_extensions pyyaml setuptools
 
# Install test dependencies
RUN dnf install -y \
      protobuf-devel \
      protobuf-c-devel \
      protobuf-lite-devel \
      wget \
      patch

# Set default entrypoint
ENTRYPOINT []
CMD ["/bin/bash"]